{"version":3,"sources":["components/NavLinkComponent/NavLinkComponent.tsx","components/Header/Header.tsx","pages/HomePage/HomePage.tsx","api.ts","components/Loader/Loader.tsx","components/LinkOnPeson/LinkOnPerson.tsx","components/PeopleList/PeopleList.tsx","pages/PeoplePage/PeoplePage.tsx","pages/NotFoundPage/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["NavLinkComponent","title","to","className","isActive","classNames","Header","role","HomePage","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","LinkOnPerson","person","slug","sex","name","PeopleList","people","useParams","selectedPersonSlug","map","born","died","mother","motherName","father","fatherName","getPerson","find","PeoplePage","useState","setPeople","isLoading","setIsLoading","isLoadingError","setIsLoadingError","isEmptyDataError","setIsEmptyDataError","useEffect","peoplesFromApi","length","peoplesWithParents","currentPerson","catch","finally","NotFoundPage","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.c914ed42.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\ntype Props = {\n  title: string,\n  to: string,\n};\n\nexport const NavLinkComponent: React.FC<Props> = ({ title, to }) => {\n  return (\n    <NavLink\n      className={({ isActive }) => (\n        classNames(\n          'navbar-item',\n          { 'has-background-grey-lighter': isActive },\n        )\n      )}\n      to={to}\n    >\n      {title}\n    </NavLink>\n  );\n};\n","import { NavLinkComponent } from '../NavLinkComponent';\n\nexport const Header: React.FC = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <NavLinkComponent title=\"Home\" to=\"/\" />\n        <NavLinkComponent title=\"People\" to=\"/people\" />\n      </div>\n    </div>\n  </nav>\n);\n","export const HomePage: React.FC = () => (\n  <div className=\"container\">\n    <h1 className=\"title\">Home Page</h1>\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../../types/Person';\n\ntype Props = {\n  person?: Person\n};\n\nexport const LinkOnPerson: React.FC<Props> = ({ person }) => {\n  return (\n    <Link\n      to={`../${person?.slug}`}\n      className={classNames(\n        { 'has-text-danger': person?.sex === 'f' },\n      )}\n    >\n      {person?.name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../../types/Person';\nimport { LinkOnPerson } from '../LinkOnPeson';\n\ntype Props = {\n  people: Person[],\n};\n\nexport const PeopleList: React.FC<Props> = ({ people }) => {\n  const { slug: selectedPersonSlug = '' } = useParams();\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n      <tbody>\n        {people.map((person) => {\n          return (\n            <>\n              <tr\n                data-cy=\"person\"\n                className={classNames({\n                  'has-background-warning': selectedPersonSlug === person.slug,\n                })}\n              >\n                <td>\n                  <LinkOnPerson person={person} />\n                </td>\n\n                <td>{person.sex}</td>\n\n                <td>{person.born}</td>\n\n                <td>{person.died}</td>\n\n                <td>\n                  {person.mother\n                    ? (\n                      <LinkOnPerson person={person.mother} />\n                    ) : (\n                      person.motherName || '-'\n                    )}\n                </td>\n\n                <td>\n                  {person.father\n                    ? (\n                      <LinkOnPerson person={person.father} />\n                    ) : (\n                      person.fatherName || '-'\n                    )}\n                </td>\n              </tr>\n            </>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { getPeople } from '../../api';\nimport { Loader } from '../../components/Loader';\nimport { PeopleList } from '../../components/PeopleList';\nimport { Person } from '../../types/Person';\n\nconst getPerson = (people: Person[], name: string) => (\n  people.find((person) => person.name === name) || null\n);\n\nexport const PeoplePage: React.FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n  const [isEmptyDataError, setIsEmptyDataError] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then((peoplesFromApi) => {\n        if (peoplesFromApi.length === 0) {\n          setIsEmptyDataError(true);\n\n          return;\n        }\n\n        const peoplesWithParents = peoplesFromApi.map((person) => {\n          const currentPerson = { ...person };\n\n          if (person.motherName) {\n            currentPerson.mother = getPerson(peoplesFromApi, person.motherName);\n          }\n\n          if (person.fatherName) {\n            currentPerson.father = getPerson(peoplesFromApi, person.fatherName);\n          }\n\n          return currentPerson;\n        });\n\n        setPeople(peoplesWithParents);\n      })\n      .catch(() => setIsLoadingError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isEmptyDataError && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n          {isLoadingError && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong while list of people loading!!\n            </p>\n          )}\n\n          {isLoading\n            ? (\n              <Loader />\n            ) : (\n              <PeopleList people={people} />\n            )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const NotFoundPage: React.FC = () => (\n  <div className=\"container\">\n    <h1 className=\"title\">Page not found</h1>\n  </div>\n);\n","import './App.scss';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { Header } from './components/Header';\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\nexport const App: React.FC = () => (\n  <div data-cy=\"app\">\n    <Header />\n\n    <main className=\"section\">\n      <Routes>\n        <Route path=\"/\" element={<HomePage />} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"people\">\n          <Route index element={<PeoplePage />} />\n          <Route path=\":slug\" element={<PeoplePage />} />\n        </Route>\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Routes>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}